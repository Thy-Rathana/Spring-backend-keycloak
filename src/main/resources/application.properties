server.port=8090

spring.datasource.url=jdbc:postgresql://localhost:5432/my_database
spring.datasource.username=postgres
spring.datasource.password=password
spring.datasource.driver-class-name=org.postgresql.Driver

## Hibernate Properties
# The postgres dialect makes Hibernate generate better SQL for the chosen database
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect

# Hibernate ddl auto (create, create-drop, validate, update)
spring.jpa.hibernate.ddl-auto=update

# Keycloak Configuration
#{
#"realm": "react-auth",
#"auth-server-url": "http://10.2.2.141:8020",
#"ssl-required": "external",
#"resource": "react-auth",
#"public-client": true,
#"confidential-port": 0
#}

#keycloak.enabled=true
#keycloak.ssl-required=external
#keycloak.public-client=false
#keycloak.use-resource-role-mappings=true
#
#keycloak.realm=react-auth
#keycloak.clientId=react-auth
#keycloak.auth-server-url=http://localhost:8080/auth
#keycloak.resource=react-auth
#


#spring:
#    security:
#        oauth2:
#            resourceserver:
#                jwt:
#                    issuer-uri: http://10.2.2.141:8020/realms/react-auth
#                        jwk-set-uri: ${spring.security.oauth2.resourceserver.jwt.issuer-uri}/protocol/openid-connect/certs

spring.security.oauth2.resourceserver.jwt.issuer-uri=http://10.2.2.141:8020/realms/react-auth
spring.security.oauth2.resourceserver.jwt.jwk-set-uri=${spring.security.oauth2.resourceserver.jwt.issuer-uri}/protocol/openid-connect/certs
